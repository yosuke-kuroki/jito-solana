//! The `config` module pulls together global configuration
//!
use config::{Config, Value};
use serde::de::Deserialize;
use std::sync::RwLock;

lazy_static! {
    static ref SETTINGS: RwLock<Config> = {
        let settings = RwLock::new(Config::default());
        {
            let mut settings = settings.write().unwrap();

            // defaults go here
            settings.set_default("window_size", 32*1024).unwrap();

        }
        settings
    };
}

pub fn get<'de, T: Deserialize<'de>>(key: &'de str) -> T {
    SETTINGS.read().unwrap().get(key).unwrap()
}

pub fn set<T>(key: &str, value: T) -> ()
where
    T: Into<Value>,
{
    SETTINGS.write().unwrap().set(key, value).unwrap();
}
